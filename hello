https://pynative.com/python-string-exercise/


# Merge sorted array == m and n, list1, list2 -- 
## save in nums1 list and return None
**-----NOTE==== return sorted list in nums1===**


class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        i = m - 1
        j = n - 1
        k = m + n - 1
        while i >= 0 and j >= 0:
            if nums1[i] > nums2[j]:
                nums1[k] = nums1[i]
                i -= 1
            else:
                nums1[k] = nums2[j]
                j -= 1  
            k -= 1
        
        while j >= 0:
            nums1[k] = nums2[j]
            j -= 1  
            k -= 1





======
**bold**  Merege 2 array sorted ==
nums1,nums2,n,m ===taken in merged

**-----NOTE==== return sorted list in mereged new list===**====normal merge of 2 sorted lists 


def function(nums1,nums2,n,m):
    merged = []
    i = 0 
    j = 0
    while i < m and j < n:
        if nums1[i] < nums2[j]:
            merged.append(nums1[i])
            i += 1
        else:
            merged.append(nums2[j])
            j += 1
    while i < m:
        merged.append(nums1[i])
        i += 1
    while j < n:
        merged.append(nums2[j])
        j += 1
    for index, number in enumerate(merged):
        nums1[index] = number
        print(nums1[index],number)

nums1 = [1,2,3,0,0,0] 
nums2 = [2,5,6]
m = 3
n = 3

function(nums1,nums2,n,m)


============

#To merge two unsorted lists into a single sorted list

**-----NOTE==== The list is sorted ======return sorted list in mereged new list===**====normal merge of 2 sorted lists 

def merge_sorted_lists(mylist, mylist1):
    # Sort both lists first
    mylist.sort()
    mylist1.sort()

    merged = []
    i = j = 0
    length = len(mylist)
    length1 = len(mylist1)

    # Merge the lists while both have elements left
    while i < length and j < length1:
        if mylist[i] < mylist1[j]:
            merged.append(mylist[i])
            i += 1
        else:
            merged.append(mylist1[j])
            j += 1

    # If there are remaining elements in mylist, add them
    while i < length:
        merged.append(mylist[i])
        i += 1

    # If there are remaining elements in mylist1, add them
    while j < length1:
        merged.append(mylist1[j])
        j += 1

    print(merged)

mylist = [4, 5, 1, 2, 4]
mylist1 = [3, 4]
merge_sorted_lists(mylist, mylist1)





===========

# Sort using soort function

my_list = [4, 5, 1, 2, 4]
sorted_list = sorted(my_list)
print(sorted_list)



=======

# Normal sort


def function(mylist):
      length = len(mylist)
    Flag = True
    while Flag:
        Flag = False
        for i in range(length - 1):
            if mylist[i] > mylist[i+1]:
                mylist[i],mylist[i+1] = mylist[i+1],mylist[i]
                Flag = True
        print(mylist)    
       
        
mylist = [4, 5, 1, 2, 4]

function(mylist)
============

Reverse Vowels of a String
==
class Solution:
    def reverseVowels(self, s: str) -> str:
        vowels = set('aeiouAEIOU')
        s = list(s)
        left = 0
        right  = len(s) - 1
        while left < right:
            if s[left] in vowels and s[right] in vowels:
                s[left],s[right] = s[right],s[left]
                left += 1
                right -= 1
            if s[left] not in vowels:
                left += 1
            if s[right] not in vowels:
                right -= 1
        return "".join(s)

=========================


def reversestr(list1):
  #  s = s[::-1]
   # s = s.replace(" ", "")
   # print(s)
   list2 = []
   for s in list1:
    s = s.lower()
    s = s.replace(" ", "")
    print(s)
    list2 = len(s)
    print(list2)


list1 = ["Helloname","bbb b","c v vv"]
reversestr(list1)


==================

Count the Number of matching characters in a pair of string

2 types

def matching(str1,str2):
    count = 0
    for i in range(len(str1)):
        if str1[i] in str2:
             count += 1

            
    return count

str1 = 'aabcddekll12@'
str2 = 'bb2211@55k'
print(matching(str1,str2))



def matching1(string11,string2):
    setvar = set()
    for i in range(len(string11)):
        if string11[i] in string2:
            setvar.add(string11[i])
    print(setvar, len(setvar))
    return setvar


string11 = 'abcdef'
string2 = 'defghia'
print(matching1(string11, string2))


====
'''Python – Avoid Spaces in string length
Last Updated : 16 May, 2023
Given a String, compute all the characters, except spaces.

Input : test_str = ‘geeksforgeeks 33 best’ 
Output : 19 
Explanation : Total characters are 19. 

Input : test_str = ‘geeksforgeeks best’ 
Output : 17 
Explanation : Total characters are 17 except spaces.'''

#=============================

def string_length_withoutspace(string1, string2):
    string1 = string1.replace(" ", "")
    print(string1)
    string2 = "".join(char for char in string2 if char.isalnum())
    print(string2)
    return (len(string1),len(string2))
     

string1 = "I D  ad;"
# below string has special character
string2 = "geeksforg.       eeks best’"
print(string_length_withoutspace(string1,string2))


======
#===============================================

'''How to Remove Letters From a String in Python
Last Updated : 28 Aug, 2023
Strings are data types used to represent text/characters. In this article, we present different methods for the problem of removing the ith character from a string and talk about possible solutions that can be employed in achieving them using Python.

Input: 'Geeks123For123Geeks'
Output: GeeksForGeeks
Explanation: In This, we have removed the '123' character from a string'''

#=============================

def removechar(string1,string2):
    string1 = string1.replace('123','')
    string2 = string2[3:-3]
    print(string1)
    print(string2)

string1 = "Geeks123For123Geeks"
string2 = "abcdefgh"
removechar(string1,string2)
'''Python – Uppercase Half String
Last Updated : 08 May, 2023
Given a String, perform uppercase of the later part of the string.

Input : test_str = 'geeksforgeek' 
Output : geeksfORGEEK 
Explanation : Latter half of string is uppercased. '''

#=============================

def uppercase_string(string1):
    string1half = string1[:-5]
    print(string1half)
    split = string1[8:]
    print(split)
    result = split.upper()
    print(result)
    c = string1half,result
    return "".join(c)

string1 = "geeksforgeeks"
print(uppercase_string(string1))
===================================================


import re
from typing import Counter

def list_new(listvalues):
    dict1 = {}
    for i in listvalues:
        result = i.upper()
        result = result.replace(" ","")
        print(result)
 
        if result in dict1:
            dict1[result] += 1
        else:
            dict1[result] = 1
    return(dict1)


listvalues = ["A man a plan a canal: Panama", "race a car", "race a car"]
print(list_new(listvalues))

==============


Question 1

How many 0's will you write when writing all numbers from 1 to 1000?

from typing import Counter


def say_hello(num):
    count = 0
    c = 0
    for i in range(1, num + 1):
        count += str(i).count('0')
    return count


num = 1000
print(say_hello(num))
=====================


'''
Q: Write a program which prints out all numbers between 1 and 100. When the program would print out a number exactly divisible by 4, print "Linked" instead. When it would print out a number exactly divisible by 6, print "In" instead. When it would print out a number exactly divisible by both 4 and 6, print "LinkedIn."
'''

def fun(number):
    for i in range(1, number + 1):
        if i % 4 == 0:
            print("Linked")
        elif i % 6 == 0:
            print("In")
        elif i % 4 == 0 and i % 6 == 0:
            print("LinkedIn")
        else:
            print(i)


number = 100
fun(number)


===============

'''
Initial Array: [1, 2, 3, 4]
Cumulative Sum: [1, 3, 6, 10]
'''

def arr_sum(list1):
    first = [] 
    d = 0
    for i in list1:
        d += i
        first.append(d)
        
       
    return first


list1 = [1, 2, 3, 4]
print(arr_sum(list1))

====================================

SPLIT array in 2 equal sum

def split_list_equal_sum(arr):
    total_sum = sum(arr)
    
    # If the total sum is odd, it's impossible to split into two equal parts
    if total_sum % 2 != 0:
        print("Cannot split into two equal sum parts.")
        return False
    
    target_sum = total_sum // 2
    current_sum = 0
    list1 = []
    list2 = []

    for num in arr:
        if current_sum + num <= target_sum:
            list1.append(num)
            current_sum += num
        else:
            list2.append(num)

    if current_sum == target_sum:
        print("List 1:", list1)
        print("List 2:", list2)
        return True
    else:
        print("Cannot split into two equal sum parts.")
        return False

arr = [1, 2, 3, 4, 5, 6]  
print(split_list_equal_sum(arr))

================================================


In a given array, rotate a part of the array for which the index is given


def rotate1(arr, index):
    arr[:] = arr[-index:] + arr[:-index]
    return arr



arr = [3,4,5,6,7,7,8]
index = 3
print(rotate1(arr, index))



=============================================

'''
Exercise 1A: Create a string made of the first, middle and last character
Write a program to create a new string made of an input string’s first, middle, and last character.

Given:

str1 = "James"
Expected Output:

Jms
'''

def say_hello():
    str = "james"
    l = 0
    r = len(str) -1 
    mid = (l+r) //2
    w = str[l] + str[mid] + str[r]
    print(w)
print(say_hello())



'''
Exercise 1B: Create a string made of the middle three characters
Write a program to create a new string made of the middle three characters of an input string.

Given:

Case 1

str1 = "JhonDipPeta"
Output

Dip
Case 2

str2 = "JaSonAy"
Output

Son
'''
def say_hello():
    str1 = "JhonrrrDipPeta"
    r = len(str1) 
    print(r)
    mid = r // 2
    print(mid)
    check = str1[mid - 1: mid + 2]
    print(check)
print(say_hello())

'''
Exercise 2: Append new string in the middle of a given string
Given two strings, s1 and s2. Write a program to create a new string s3 by appending s2 in the middle of s1.

Given:

s1 = "Ault"
s2 = "Kelly"
Expected Output:

AuKellylt
'''

def stringappend(s1,s2):

    mid = int(len(s1) / 2)
    c = s1[:mid] + s2 + s1[mid:]
    return c


s1 = "Ault"
s2 = "Kelly"
print(stringappend(s1,s2))


'''

Exercise 3: Create a new string made of the first, middle, and last characters of each input string

Given two strings, s1 and s2, write a program to return a new string made of s1 and s2’s first, middle, and last characters.

Given:

s1 = "America"
s2 = "Japan"
Expected Output:

AJrpan

'''

def stringappend(s1,s2):

    l = l1 = 0
    r = len(s1) - 1
    r1 = len(s2) - 1
    mid = (l + r) // 2
    mid1 = (l1 + r1) // 2
    s3 = s1[l] +s2[l1]+s1[mid] +s2[mid1]+s1[r] +s2[r1]
    return s3
s1 = "America"
s2 = "Japan"
print(stringappend(s1,s2))


'''

Exercise 4: Arrange string characters such that lowercase letters should come first
Given string contains a combination of the lower and upper case letters. Write a program to arrange the characters of a string so that all lowercase letters should come first.

Given:

str1 = PyNaTive
Expected Output:

yaivePNT

'''

def stringappend(str1):
    s2 = []
    for char in str1:
        if char.islower():
            s2.append(char)
    c = "".join(s2)
    for char in str1:
        if char.isupper():
            s2.append(char)
    c = "".join(s2)
    return c
str1 = "PyNaTive"
print(stringappend(str1))







'''Exercise 5: Count all letters, digits, and special symbols from a given string
Given:

str1 = "P@#yn26at^&i5ve"
Expected Outcome:

Total counts of chars, digits, and symbols 

Chars = 8 
Digits = 3 
Symbol = 4'''


def func(str1):
    countdigit = 0
    countchar = 0
    countsym = 0
    for char in str1:
        if char.isdigit():
            countdigit += 1
        elif char.isalpha():
            countchar += 1
        else:
            countsym += 1
    c = "".join(char for char in str1 if char.isalpha())   
    print(len(c))  
    print(c)   
        
    print("Digits =",countdigit)
    print("Chars =",countchar)
    print("Symbol =",countsym)

str1 = "P@#yn26at^&i5ve"   
func(str1)


=============


'''
Exercise 7: String characters balance Test
Write a program to check if two strings are balanced. For example, strings s1 and s2 are balanced if all the characters in the s1 are present in s2. The character’s position doesn’t matter.

Given:


Case 1:

s1 = "Yn"
s2 = "PYnative"
Expected Output:

True
Case 2:

s1 = "Ynf"
s2 = "PYnative"
Expected Output:

False
'''

def func(s1, s2):

    if s1 not in s2:
        return False
    return True




s1 = "Yn"
s2 = "PYnative"
print(func(s1, s2))


====


Exercise 8: Find all occurrences of a substring in a given string by ignoring the case
Write a program to find all occurrences of “USA” in a given string ignoring the case.

Given:

str1 = "Welcome to USA. usa awesome, isn't it?"
Expected Outcome:


The USA count is: 2



def func(str1, k):
    new = str1.lower()
    print(new)

    c = new.count(k.lower())
    return c

str1 = "Welcome to USA. usa awesome, isn't it?"
k = "USA"
print(func(str1, k))


=====


'''
Exercise 9: Calculate the sum and average of the digits present in a string
Given a string s1, write a program to return the sum and average of the digits that appear in the string, ignoring all other characters.

Given:

str1 = "PYnative29@#8496"
Expected Outcome:

Sum is: 38 Average is  6.333333333333333
'''
print("-----------")
def func(str1):
    avg1 = 0
    count1 = 0
    sum1 = 0
    for i in str1:
        if i.isdigit():
            count1 += 1
            sum1 += int(i)
    avg1 = sum1 / count1        
    print(count1)
    print(sum1)
    print(avg1)



str1 = "PYnative29@#8496"
print(func(str1))

===

10 and 11 from here ==https://pynative.com/python-string-exercise/


==

'''
Exercise 12: Find the last position of a given substring
Write a program to find the last position of a substring “Emma” in a given string.

Given:

str1 = "Emma is a data scientist who knows Python. Emma works at google."
Expected Output:

Last occurrence of Emma starts at index 43
'''
print("-----------")
def func(s,find1):
    return s.rfind(find1)
    
s = "Emma is a data scientist who knows Python. Emma works at google."
find1= "Emma"
print(func(s,find1))

====

Exercise 14: Remove empty strings from a list of strings
Given:

str_list = ["Emma", "Jon", "", "Kelly", None, "Eric", ""]
Expected Output:


Original list of sting
['Emma', 'Jon', '', 'Kelly', None, 'Eric', '']

After removing empty strings
['Emma', 'Jon', 'Kelly', 'Eric']


def func(list1):
    s1 =[]
    for s in list1:
        if s:
            s = s.replace(" ", "")
        if s:
            s1.append(s)
    return s1


list1 = ["Emma", "Jon", "", "Kelly", None, "Eric", ""]
print(func(list1))

====

def func(list1):
    s1 =[]
    dict1 = {}
    for s in list1:
        if s:
            s = s.replace(" ", "")
            s = s.lower()
        if s:
            s1.append(s)
    
    print(s1)
    

    for i in s1:
        if i in dict1:
            dict1[i] += 1
        else:
            dict1[i] = 1
    return dict1

list1 = ["Emma", "Jon", "", "Kelly", None, "Eric", ""]
print(func(list1))

======================
Exercise 15: Remove special symbols / punctuation from a string
Given:

str1 = "/*Jon is @developer & musician"
Expected Output:

"Jon is developer musician"

answer--

def func(str1):

    c = "".join(char if char.isalnum() or char.isspace() else '' for char in str1)
    return c
str1 = "/*Jon is @developer & musician"
print(func(str1))



===========
Exercise 16: Removal all characters from a string except integers
Given:

str1 = 'I am 25 years and 10 months old'
Expected Output:

2510

def func(str1):
    ''' s = ""
    for char in str1:
        if char.isdigit():
            s += char
    return s'''

    return "".join(char for char in str1 if char.isdigit())

str1 = 'I am 25 years and 10 months old'
print(func(str1))


=======


Exercise 17: Find words with both alphabets and numbers
Write a program to find words with both alphabets and numbers from an input string.

Given:

str1 = "Emma25 is Data scientist50 and AI Expert"
Expected Output:

Emma25
scientist50

def func(str1):
    s = []
    str1 = str1.split()
    
    for word in str1:
        if any(char.isdigit() for char in word) and any(char.isalpha() for char in word):
            s.append(word)
    return "\n".join(s)
str1 = "Emma25 is Data scientist50 and AI Expert"
print(func(str1))

=========================================================================================================================================================================================================
https://pynative.com/python-list-exercise-with-solutions/ --list 1,2,3,4





def say_hello(list1):
    list1 = list1[::-1]
    return list1

list1 = [100, 200, 300, 400, 500]
print(say_hello(list1))



print("=======================")


def say_hello(list1, list2):
    list3 =[]
    list3 =[i + j for i, j in zip(list1,list2)]
    return list3

list1 = ["M", "na", "i", "Ke"]
list2 = ["y", "me", "s", "lly"]
print(say_hello(list1, list2))

print("=======================")

def say_hello(list1):
    for i, n in enumerate(list1):
        sum = n * n
        list1[i] = sum
    return list1

list1 =[1, 2, 3, 4, 5, 6, 7]
print(say_hello(list1))

print("=======================")


def say_hello(list1, list2):
    ''' list3 = []
    for i in list1:
        for j in list2:
            print(i,j)
    return list3'''
    list3 = [i + j for i in list1 for j in list2]
    return list3

list1 = ["Hello ", "take "]
list2 = ["Dear", "Sir"]
print(say_hello(list1, list2))
==================



In Python, strings and lists are different types of sequences, and they behave differently in various contexts. Let's break down how these differences impact the say_hello function.

Working with Strings
Strings are immutable sequences of characters. This means you can't change a string in place; instead, you need to create a new string if you want to make modifications.

Working with Lists
Lists are mutable sequences, which means you can modify them in place (e.g., adding, removing, or changing elements).

Differences in the Code
Filtering:

List: The filter(None, list1) removes empty strings from the list.
String: This would not apply, as strings do not have empty elements to filter out in this context.
Lowercasing:

List: You need to apply the lower() method to each element of the list individually. Using a list comprehension like [item.lower() for item in list1] accomplishes this.
String: You can call lower() directly on the string to convert all characters to lowercase at once.
Joining and Filtering Alphanumeric Characters:

List: You need to join list elements into a single string before processing characters. This requires iterating through each character of each string element.
String: You can directly iterate through characters of the string to filter out non-alphanumeric characters.
Detailed Explanation with Code
Here’s a detailed look at how these differences play out in the function:

Original Function with Issues
python
Copy code
def say_hello(list1):
    list1 = list(filter(None, list1))  # Correct usage
    print(list1)
    list1.lower()  # Incorrect usage, list has no lower() method
    print(list1)
    list1 = " ".join(char for char in list1 if char.isalnum())  # Incorrect usage, list requires joining before char filtering
    return list1

list1 = ["Mike", "", "Emma", "Kelly$", "", "Brad"]
print(say_hello(list1))
Corrected Function with Lists
python
Copy code
def say_hello(list1):
    # Remove empty strings from the list
    list1 = list(filter(None, list1))
    print("Filtered list:", list1)

    # Convert all strings in the list to lowercase
    list1 = [item.lower() for item in list1]
    print("Lowercase list:", list1)

    # Join all strings into a single string and filter out non-alphanumeric characters
    result = "".join(char for item in list1 for char in item if char.isalnum())
    return result

list1 = ["Mike", "", "Emma", "Kelly$", "", "Brad"]
print(say_hello(list1))
Output:

less
Copy code
Filtered list: ['Mike', 'Emma', 'Kelly$', 'Brad']
Lowercase list: ['mike', 'emma', 'kelly$', 'brad']
mikeemmakellybrad
Hypothetical Function with Strings
If you were to work with a single string instead of a list, the approach would be different:

python
Copy code
def process_string(s):
    # Convert to lowercase
    s = s.lower()
    print("Lowercase string:", s)

    # Filter out non-alphanumeric characters
    result = "".join(char for char in s if char.isalnum())
    return result

s = "Mike Emma Kelly$ Brad"
print(process_string(s))
Output:

c
Copy code
Lowercase string: mike emma kelly$ brad
mikeemmakellybrad



==================================================================================================
==================================================================================================================================================================================

=================================================================================================================================================================


print("=======================")
def say_hello(list1):
    dict1 = {}
    list1 = list(filter(None,list1))
    print(list1)
    list1 = [item.lower() for item in list1]
    print(list1)
    list11 = " ".join("".join(char for char in item if char.isalnum()) for item in list1)
    print(list11)
    words = list11.split()
    for i in words:
        #print(list11[i])
        if i in dict1:
            dict1[i] += 1
        else:
            dict1[i] = 1
    for keys, values in dict1.items():
        print(f"'{keys}':{values}")
    return list11

list1 = ["Mike", "", "Emma", "Kelly$", "", "Brad"]
print(say_hello(list1))
===================================================================================================================
==========================================================================================================================================
==========================================================================================================================================
===============================================================================================================================================================================================================
