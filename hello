  
# Merge sorted array == m and n, list1, list2 -- 
## save in nums1 list and return None
**-----NOTE==== return sorted list in nums1===**


class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        i = m - 1
        j = n - 1
        k = m + n - 1
        while i >= 0 and j >= 0:
            if nums1[i] > nums2[j]:
                nums1[k] = nums1[i]
                i -= 1
            else:
                nums1[k] = nums2[j]
                j -= 1  
            k -= 1
        
        while j >= 0:
            nums1[k] = nums2[j]
            j -= 1  
            k -= 1





======
**bold**  Merege 2 array sorted ==
nums1,nums2,n,m ===taken in merged

**-----NOTE==== return sorted list in mereged new list===**====normal merge of 2 sorted lists 


def function(nums1,nums2,n,m):
    merged = []
    i = 0 
    j = 0
    while i < m and j < n:
        if nums1[i] < nums2[j]:
            merged.append(nums1[i])
            i += 1
        else:
            merged.append(nums2[j])
            j += 1
    while i < m:
        merged.append(nums1[i])
        i += 1
    while j < n:
        merged.append(nums2[j])
        j += 1
    for index, number in enumerate(merged):
        nums1[index] = number
        print(nums1[index],number)

nums1 = [1,2,3,0,0,0] 
nums2 = [2,5,6]
m = 3
n = 3

function(nums1,nums2,n,m)


============

#To merge two unsorted lists into a single sorted list

**-----NOTE==== The list is sorted ======return sorted list in mereged new list===**====normal merge of 2 sorted lists 

def merge_sorted_lists(mylist, mylist1):
    # Sort both lists first
    mylist.sort()
    mylist1.sort()

    merged = []
    i = j = 0
    length = len(mylist)
    length1 = len(mylist1)

    # Merge the lists while both have elements left
    while i < length and j < length1:
        if mylist[i] < mylist1[j]:
            merged.append(mylist[i])
            i += 1
        else:
            merged.append(mylist1[j])
            j += 1

    # If there are remaining elements in mylist, add them
    while i < length:
        merged.append(mylist[i])
        i += 1

    # If there are remaining elements in mylist1, add them
    while j < length1:
        merged.append(mylist1[j])
        j += 1

    print(merged)

mylist = [4, 5, 1, 2, 4]
mylist1 = [3, 4]
merge_sorted_lists(mylist, mylist1)





===========

# Sort using soort function

my_list = [4, 5, 1, 2, 4]
sorted_list = sorted(my_list)
print(sorted_list)



=======

# Normal sort


def function(mylist):
      length = len(mylist)
    Flag = True
    while Flag:
        Flag = False
        for i in range(length - 1):
            if mylist[i] > mylist[i+1]:
                mylist[i],mylist[i+1] = mylist[i+1],mylist[i]
                Flag = True
        print(mylist)    
       
        
mylist = [4, 5, 1, 2, 4]

function(mylist)
============

Reverse Vowels of a String
==
class Solution:
    def reverseVowels(self, s: str) -> str:
        vowels = set('aeiouAEIOU')
        s = list(s)
        left = 0
        right  = len(s) - 1
        while left < right:
            if s[left] in vowels and s[right] in vowels:
                s[left],s[right] = s[right],s[left]
                left += 1
                right -= 1
            if s[left] not in vowels:
                left += 1
            if s[right] not in vowels:
                right -= 1
        return "".join(s)

=========================


def reversestr(list1):
  #  s = s[::-1]
   # s = s.replace(" ", "")
   # print(s)
   list2 = []
   for s in list1:
    s = s.lower()
    s = s.replace(" ", "")
    print(s)
    list2 = len(s)
    print(list2)


list1 = ["Helloname","bbb b","c v vv"]
reversestr(list1)


==================

Count the Number of matching characters in a pair of string

2 types

def matching(str1,str2):
    count = 0
    for i in range(len(str1)):
        if str1[i] in str2:
             count += 1

            
    return count

str1 = 'aabcddekll12@'
str2 = 'bb2211@55k'
print(matching(str1,str2))



def matching1(string11,string2):
    setvar = set()
    for i in range(len(string11)):
        if string11[i] in string2:
            setvar.add(string11[i])
    print(setvar, len(setvar))
    return setvar


string11 = 'abcdef'
string2 = 'defghia'
print(matching1(string11, string2))


====
'''Python – Avoid Spaces in string length
Last Updated : 16 May, 2023
Given a String, compute all the characters, except spaces.

Input : test_str = ‘geeksforgeeks 33 best’ 
Output : 19 
Explanation : Total characters are 19. 

Input : test_str = ‘geeksforgeeks best’ 
Output : 17 
Explanation : Total characters are 17 except spaces.'''

#=============================

def string_length_withoutspace(string1, string2):
    string1 = string1.replace(" ", "")
    print(string1)
    string2 = "".join(char for char in string2 if char.isalnum())
    print(string2)
    return (len(string1),len(string2))
     

string1 = "I D  ad;"
# below string has special character
string2 = "geeksforg.       eeks best’"
print(string_length_withoutspace(string1,string2))


======
#===============================================

'''How to Remove Letters From a String in Python
Last Updated : 28 Aug, 2023
Strings are data types used to represent text/characters. In this article, we present different methods for the problem of removing the ith character from a string and talk about possible solutions that can be employed in achieving them using Python.

Input: 'Geeks123For123Geeks'
Output: GeeksForGeeks
Explanation: In This, we have removed the '123' character from a string'''

#=============================

def removechar(string1,string2):
    string1 = string1.replace('123','')
    string2 = string2[3:-3]
    print(string1)
    print(string2)

string1 = "Geeks123For123Geeks"
string2 = "abcdefgh"
removechar(string1,string2)
'''Python – Uppercase Half String
Last Updated : 08 May, 2023
Given a String, perform uppercase of the later part of the string.

Input : test_str = 'geeksforgeek' 
Output : geeksfORGEEK 
Explanation : Latter half of string is uppercased. '''

#=============================

def uppercase_string(string1):
    string1half = string1[:-5]
    print(string1half)
    split = string1[8:]
    print(split)
    result = split.upper()
    print(result)
    c = string1half,result
    return "".join(c)

string1 = "geeksforgeeks"
print(uppercase_string(string1))
===================================================


import re
from typing import Counter

def list_new(listvalues):
    dict1 = {}
    for i in listvalues:
        result = i.upper()
        result = result.replace(" ","")
        print(result)
 
        if result in dict1:
            dict1[result] += 1
        else:
            dict1[result] = 1
    return(dict1)


listvalues = ["A man a plan a canal: Panama", "race a car", "race a car"]
print(list_new(listvalues))

==============


Question 1

How many 0's will you write when writing all numbers from 1 to 1000?

from typing import Counter


def say_hello(num):
    count = 0
    c = 0
    for i in range(1, num + 1):
        count += str(i).count('0')
    return count


num = 1000
print(say_hello(num))
=====================


'''
Q: Write a program which prints out all numbers between 1 and 100. When the program would print out a number exactly divisible by 4, print "Linked" instead. When it would print out a number exactly divisible by 6, print "In" instead. When it would print out a number exactly divisible by both 4 and 6, print "LinkedIn."
'''

def fun(number):
    for i in range(1, number + 1):
        if i % 4 == 0:
            print("Linked")
        elif i % 6 == 0:
            print("In")
        elif i % 4 == 0 and i % 6 == 0:
            print("LinkedIn")
        else:
            print(i)


number = 100
fun(number)


===============

'''
Initial Array: [1, 2, 3, 4]
Cumulative Sum: [1, 3, 6, 10]
'''

def arr_sum(list1):
    first = [] 
    d = 0
    for i in list1:
        d += i
        first.append(d)
        
       
    return first


list1 = [1, 2, 3, 4]
print(arr_sum(list1))

====================================

SPLIT array in 2 equal sum

def split_list_equal_sum(arr):
    total_sum = sum(arr)
    
    # If the total sum is odd, it's impossible to split into two equal parts
    if total_sum % 2 != 0:
        print("Cannot split into two equal sum parts.")
        return False
    
    target_sum = total_sum // 2
    current_sum = 0
    list1 = []
    list2 = []

    for num in arr:
        if current_sum + num <= target_sum:
            list1.append(num)
            current_sum += num
        else:
            list2.append(num)

    if current_sum == target_sum:
        print("List 1:", list1)
        print("List 2:", list2)
        return True
    else:
        print("Cannot split into two equal sum parts.")
        return False

arr = [1, 2, 3, 4, 5, 6]  
print(split_list_equal_sum(arr))

================================================


In a given array, rotate a part of the array for which the index is given


def rotate1(arr, index):
    arr[:] = arr[-index:] + arr[:-index]
    return arr



arr = [3,4,5,6,7,7,8]
index = 3
print(rotate1(arr, index))
